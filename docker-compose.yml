version: '3.7'
services:
    postgres:
        image: postgres:9.6
        container_name: mlflow_postgres
        restart: always
        environment:
            - POSTGRES_USER=mlflow_user
            - POSTGRES_PASSWORD=mlflow
            - POSTGRES_DB=mlflow_db
        ports:
            - "15432:5432" #external port
        networks:
            - backend        
        volumes:
            #- pgdata:/var/lib/postgresql/data #use it on windows
            - ./docker/data/postgres:/var/lib/postgresql/data #use it on linux
        logging:
           options:
             max-size: 10m
             max-file: "3"
           
    s3server:
        image: minio/minio
        container_name: mlflow_s3
        restart: always
        ports:
            - "9000:9000"
        networks:
            - backend
        volumes:
            - ./docker/data/s3:/data #use it on linux
        environment:
            MINIO_ACCESS_KEY: "AKIAIOSFODNN7EXAMPLE"
            MINIO_SECRET_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
        logging:
           options:
             max-size: 10m
             max-file: "3"
        command: server --address 0.0.0.0:9000 /data

    web:
        restart: always
        build: ./docker/mlflow
        image: mlflow_server
        container_name: mlflow_server
        expose:
            - "5000"
        networks:
            - frontend
            - backend
        environment:
            AWS_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"
            AWS_SECRET_ACCESS_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
            MLFLOW_S3_ENDPOINT_URL: "http://s3server:80"
        command: mlflow server --backend-store-uri postgresql://mlflow_user:mlflow@postgres:5432/mlflow_db --default-artifact-root s3://mlflow-bucket/mlflow/ --host 0.0.0.0        

    nginx:
        restart: always
        build: ./docker/nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "80:80"
        networks:
            - frontend
        depends_on:
            - web


networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge
